name: Sensing dev installer Build and Release

on:
  push:
    tags:
      - "v*.*.*"  # vYY.MM.Patch example v23.08.00 etc.

jobs:
  release:
    runs-on: windows-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
         python-version: "3.11.4"

      - name: Install Conan and PyYAML via pip
        run: |
         python -m pip install conan
         python -m pip install PyYAML

      - name: Disable Perl (remove from PATH)
        run: choco uninstall strawberryperl -n

      - name: Install WiX Toolset
        run: choco install wixtoolset -y

      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          submodules: recursive

      - name: Create and enter build directory
        run: |
          cd installer
          mkdir build
          cd build

      - name: Run CMake
        working-directory: installer/build
        run: cmake -G "Visual Studio 17 2022" -A x64 ../

      - name: Build
        working-directory: installer/build
        run: cmake --build . --config Release 

      - name: Generate liscence files
        working-directory: installer/build
        run: cmake -G "Visual Studio 17 2022" -A x64 ../ 

      - name: Create package msi
        working-directory: installer/build
        run: cpack -G "WIX"

      - name: Create package zip
        working-directory: installer/build
        run: cpack -G "ZIP"

      - name: Create package without opencv
        working-directory: installer/build
        run:  cmake -G "Visual Studio 17 2022" -A x64 ../ -DOPENCV_ACTION="use_existing"

      - name: Create package msi
        working-directory: installer/build
        run: cpack -G "WIX"

      - name: Create package zip
        working-directory: installer/build
        run: cpack -G "ZIP"

      - name: Release      
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer/tools/installer*.ps1
            installer/build/*.msi
            installer/build/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-installer-script-zip:
    strategy:
      matrix:
        version: [v23.11.01, ''] 
    runs-on: windows-latest
    needs: release

    env:
      INSTALL_PATH: "$env:LOCALAPPDATA"
      SDK_NAME : "sensing-dev"
      VERSION : ${{ matrix.version == '' && github.ref_name || matrix.version}}

    steps:     
      - name: Create and enter build directory
        run: |
          mkdir build
          cd build

      - name: Download installer
        working-directory: build
        run: |
          $url = "https://github.com/Sensing-Dev/sensing-dev-installer/releases/download/${{ env.VERSION }}/installer.ps1"
          Invoke-WebRequest $url -OutFile .\installer.ps1
      
      - name: Test help
        working-directory: build
        run: |          
          Get-Help .\installer.ps1 -full

      - name: Check installations 
        working-directory: build
        run: |
          try { 
              Get-Package sensing-dev            
              Write-Error "Package exists" 
            } catch { 
              Write-Host "Package does not exists" 
              Write-Host $_
            }

      - name: Installation using ZIP
        working-directory: build
        run: |
          Write-Host "USERNAME = $env:USERNAME"
          powershell.exe -ExecutionPolicy Bypass -File .\installer.ps1 -version ${{ matrix.version }} -user "$env:USERNAME"
          

      - name: Test Env instaltion ZIP 
        working-directory: build          
        run: |
          $GST_PLUGIN_PATH =  [Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          Write-Host GST_PLUGIN_PATH = $GST_PLUGIN_PATH

          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          Write-Host SENSING_DEV_ROOT = $SENSING_DEV_ROOT

          $PYTHONPATH= [Environment]::GetEnvironmentVariable("PYTHONPATH", "User")
          Write-Host PYTHONPATH = $PYTHONPATH

          if (($GST_PLUGIN_PATH -ne "") -and ($PYTHONPATH -ne "") -and ($SENSING_DEV_ROOT -ne "")) { Write-Host "Success" } else { Write-Error "One or more required environment variables are not set" }
          tree $SENSING_DEV_ROOT /f

      - name: Test installation arv-tool
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $PATH= [Environment]::GetEnvironmentVariable("PATH", "User")
          Write-Host PATH = $PATH
          $env:PATH="$env:PATH;$PATH"
          & arv-tool-0.8.exe

      - name: Uninstallation
        working-directory: build
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          Remove-Item "$SENSING_DEV_ROOT" -Recurse -Force
        

  
      





