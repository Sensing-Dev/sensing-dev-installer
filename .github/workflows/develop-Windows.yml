name: Generate Windows Config and test installation with script


on:
  pull_request:
    branches:
      - main

### modify here for update #####################################################
env:
  TEST_CONFIG_VERSION_SDK: v99.99.99
  LATEST_OPENCV_VERSION: 4.10.0
  LATEST_OPENCV_BIN_PATH: opencv/build/x64/vc16/bin
  REPO_NAME: Sensing-Dev/sensing-dev-installer
################################################################################

jobs:
  set_env:
    runs-on: windows-latest
    outputs:
      LATEST_RELEASED_SDK: ${{ steps.get_latest_tag.outputs.LATEST_RELEASED_SDK }}
    steps:
      - name: Get latest release tag
        id: get_latest_tag
        run: |
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ env.REPO_NAME}}/releases/latest"
          $latestTag = $releases.tag_name
          echo "LATEST_RELEASED_SDK=$latestTag" >> $env:GITHUB_OUTPUT





  generate_config:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.4"

      - name: Create config for Windows
        run: |
          cd installer
          mkdir build && cd build
          python -m pip install --upgrade pip
          pip install -r ${{ github.workspace }}/installer/src/requirements.txt
          python ${{ github.workspace }}/installer/src/generate_config.py -p Windows -v ${{ env.TEST_CONFIG_VERSION_SDK}}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: install-test-for-windows
          path: |
            ${{ github.workspace }}/build/config_Windows.json
            ${{ github.workspace }}/installer/tools/*
            ${{ github.workspace }}/installer/testcases





  test_installation:
    runs-on: ${{ matrix.os }}
    needs: [set_env, generate_config]

    strategy:
        matrix:
          os: [windows-2019, windows-latest]
          install_option : ["-version ${{ needs.set_env.outputs.LATEST_RELEASED_SDK }}", "-configPath config_Windows.json"]
          with_openCV : ["", "-InstallOpenCV"]
          with_gst_option:  ["", "-InstallGstTools", "-InstallGstTools -InstallGstPlugins"]
          exclude:
            # InstallGstTools is not on the release version yet
            - install_option: "-version ${{ needs.set_env.outputs.LATEST_RELEASED_SDK }}"
              with_gst_option: "-InstallGstTools"
            - install_option: "-version ${{ needs.set_env.outputs.LATEST_RELEASED_SDK }}"
              with_gst_option: "-InstallGstTools -InstallGstPlugins"

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: install-test-for-windows
          path: download

      - name: Set all items under test directory
        run: | 
          New-Item -ItemType Directory -Path ${{ github.workspace }}/test | Out-Null
          Move-Item -Path ${{ github.workspace }}/download/build/config_Windows.json -Destination ${{ github.workspace }}/test
          Move-Item -Path ${{ github.workspace }}/download/installer/tools/installer.ps1 -Destination ${{ github.workspace }}/test

      - name: Install with the script from Artifacts (v24.09 or later)
        run: |
          cd ${{ github.workspace }}/test
          powershell.exe -ExecutionPolicy Bypass -File .\installer.ps1 ${{ matrix.install_option }} ${{ matrix.with_openCV }} ${{ matrix.with_gst_option }} -verbose

      - name: Check if OpenCV exists on Windows (v24.09 or later)
        if: ${{ (matrix.with_openCV == '-InstallOpenCV') }}
        id: check_opencv
        run: |
          $filePath = "${env:LOCALAPPDATA}\sensing-dev\opencv"
          if (Test-Path $filePath) {
            Write-Output "File exists: $filePath"
          } else {
            Write-Output "File does not exist: $filePath"
            exit 1
          }

      - name: Check if version_info.json exists (v24.05 or later)
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $target_file = Join-Path -Path "$SENSING_DEV_ROOT" -ChildPath "version_info.json"
          if (Test-Path $target_file){
            echo "version_info.json exists."
          } else{
            echo "version_info.json does not exist."
            exit 1
          }

      - name: Test Aravis installation and Path (v24.01 or later)
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User") 
          $env:PATH="$env:PATH;$PATH"
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT}
          cd ${{ github.workspace }}/download/installer/testcases/cpp/aravis_test  && cmake ./
          cmake --build . --config Release 
          cd Release && ls && ./aravis_test

      - name: Test ion-kit (v24.01 or later)
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")    
          $env:PATH="$env:PATH;$PATH"
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT}
          cd ${{ github.workspace }}/download/installer/testcases/cpp/ionkit_test && cmake ./
          cmake --build . --config Release 
          cd Release && ls && ./ionkit_test

      - name: Test opencv (v24.09 or later)
        if: ${{ matrix.with_openCV == '-InstallOpenCV' }}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT} 
          $env:PATH="$env:PATH;$PATH"
          cd ${{ github.workspace }}/download/installer/testcases/cpp/opencv_test  && cmake ./
          cmake --build . --config Release 
          cd Release && ./opencv_test

      - name: Test GenDC Header Library (v25.01 or later)
        if: ${{ matrix.install_option == '--configPath config_Windows.json' }}
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT} 
          cd ${{ github.workspace }}/download/installer/testcases/cpp/gendc_test && cmake ./
          cmake --build . --config Release 
          cd Release && ls && ./gendc_test

      - name: Test gst-inspect-1.0 and gstreamer (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools' ||  matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins'}}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0

      - name: Test gstreamer core with plugin (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins' }}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0 queue

      - name: Test gst-plugin-base (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins' }}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0 videoconvert

      - name: Test gst-plugin-good (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins' }}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0 multifilesrc

      - name: Test gst-inspect-1.0 aravissrc (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools' ||  matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins'}}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0 aravissrc

      - name: Test gst-inspect-1.0 gendcseparator (v24.12 or later)
        if: ${{ matrix.with_gst_option == '-InstallGstTools' ||  matrix.with_gst_option == '-InstallGstTools -InstallGstPlugins'}}
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH="$env:PATH;$PATH"
          $env:GST_PLUGIN_PATH=[Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          gst-inspect-1.0 gendcseparator





  test_python:
    runs-on: ${{ matrix.os }}
    needs: [set_env, generate_config]
    strategy:
      matrix:
        os: [windows-latest]
        python_version: ["3.10", "3.11"]

    steps:
      - name: Disable perl
        run: |
          rm -r C:\Strawberry\perl

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Setup winget
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: install-test-for-windows
          path: download

      - name: Get config content and install python modules
        run: | 
          $comp_info = Get-Content -Path ${{ github.workspace }}/download/build/config_Windows.json -Raw | ConvertFrom-Json
          $ionkit_version = $comp_info.ion_kit.version
          $gendc_separator_version = $comp_info.gendc_separator.version
          if ( $ionkit_version.StartsWith("v") ){ 
            $ionkit_version = $ionkit_version.substring(1)
          }
          if ( $gendc_separator_version.StartsWith("v") ){ 
            $gendc_separator_version = $gendc_separator_version.substring(1)
          }
          pip install ion-contrib-python==$ionkit_version
          pip install gendc-python==$gendc_separator_version
          pip install numpy
          pip install opencv-python
          pip install aravis-python

      - name: Test ion-kit
        run: |
          cd ${{ github.workspace }}/download/installer/testcases/python
          python ionkit_test.py

      - name: Test ion-kit with Aravis
        run: |
          cd ${{ github.workspace }}/download/installer/testcases/python
          $ENV:GENICAM_FILENAME = "${{ github.workspace }}/download/installer/testcases/python/arv-fake-camera.xml"
          python ionkit_contrib_test.py ${{ github.workspace }}/download/installer/testcases/python/ionkit_contrib_test.py

      - name: Test OpenCV
        run: |
          cd ${{ github.workspace }}/download/installer/testcases/python
          python opencv_test.py

      - name: Install pygobject
        run: |
          cd ${{ github.workspace }}/download/installer/tools
          dir
          .\pygobject_installer

      - name: Test Aravis
        run: |
          cd ${{ github.workspace }}/download/installer/testcases/python
          python aravis_test.py

      - name: Test GenDC
        run: |
          cd ${{ github.workspace }}/download/installer/testcases/python
          python gendc_test.py


          

  test_gst_opencv:
    runs-on: ${{ matrix.os }}
    needs: [set_env, generate_config]
    strategy:
      matrix:
        install_option : ["-version ${{ needs.set_env.outputs.LATEST_RELEASED_SDK }}", "-configPath config_Windows.json"]
        os: [windows-latest]
        python_version: ["3.10", "3.11"]
        overwrite_opencv: [true, false]

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: install-test-for-windows
          path: download

      - name: Set all items under test directory
        run: | 
          New-Item -ItemType Directory -Path ${{ github.workspace }}/test | Out-Null
          Move-Item -Path ${{ github.workspace }}/download/build/config_Windows.json -Destination ${{ github.workspace }}/test
          Move-Item -Path ${{ github.workspace }}/download/installer/tools/installer.ps1 -Destination ${{ github.workspace }}/test

      - name: Install Sensing-Dev with the script from Artifacts (general)
        run: |
          cd ${{ github.workspace }}/test
          powershell.exe -ExecutionPolicy Bypass -File .\installer.ps1 ${{ matrix.install_option }} -verbose

      - name: Install Numpy
        run: | 
          pip install numpy==2.1.1 

      - name: Install OpenCV (for overwrite test)
        if: ${{ matrix.overwrite_opencv }}
        continue-on-error: true
        run: |
          pip install opencv-python
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $GST_SENSING_DEV = Join-Path -Path $SENSING_DEV_ROOT -ChildPath "bin"
          cd ${{ github.workspace }}/download/installer/testcases/python
          python opencv_gst_test.py $GST_SENSING_DEV
          if ($LASTEXITCODE -ne 0) {
              Write-Output "This opencv-python is not built with Gstreamer"
          } else {
              Write-Output "This opencv-python is built with Gstreamer"
          } 

      - name: Run opencv-python with gstreamer installer script
        run: | 
          cd ${{ github.workspace }}/download/installer/tools/
          powershell.exe -ExecutionPolicy Bypass -File .\opencv_python_installer.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "The opencv_python_installer.ps1 script failed."
            exit 1
          }

      - name: Test opencv-python with gstreamer
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $GST_SENSING_DEV = Join-Path -Path $SENSING_DEV_ROOT -ChildPath "bin"
          cd ${{ github.workspace }}/download/installer/testcases/python
          python opencv_gst_test.py $GST_SENSING_DEV
          if ($LASTEXITCODE -eq 0) {
              Write-Output "PASSED This opencv-python is built with Gstreamer"
          } else {
              Write-Output "FAILED: This opencv-python is not built with Gstreamer"
              exit 1
          }
          
          