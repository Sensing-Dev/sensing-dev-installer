name: Sensing dev installer Build, Test

on:
  push:
    branches:
      #     - '*'  # This will run the build and test jobs for pull requests to all branches
      - 'feature/8-build-aravis-in-workflow'  # This will run the build and test jobs for every push on all branches

  # pull_request:
  #   branches:
  #     - '*'  # This will run the build and test jobs for pull requests to all branches



env:
  PYTHON_VERSION: '3.11.4'
  PYGOBJECT_REPO_PATH: installer\pygobject
  PYGOBJECT_GIT_REPO: https://github.com/Sensing-Dev/pygobject.git
  PYGOBJECT_PKG_URL: https://ion-kit.s3.us-west-2.amazonaws.com/dependencies/pygobject-3.42.2.zip
  PYGOBJECT_PKG_SHA: 'eea9465b7cbf1420ee3b3d8a78f6cfa3feeff89ffade7ab1874ebb25d7078037'
  PYGOBJECT_INSTALL_PATH: installer\dependencies\pygobject
  ARAVIS_REPO_PATH: installer\aravis
  ARAVIS_GIT_REPO: https://github.com/AravisProject/aravis.git
  ARAVIS_INSTALL_PATH: installer\dependencies\aravis
  DEPENDENCIES_DIR: installer\dependencies
  BUILD_PATH: installer\build


jobs:

  aravis:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
        - build_type_meson: release
          aravis_version: "0.8.25"
          pygobject_version: "3.42.2"
          gst_plugin: "disabled"
          introspection: "enabled"
          usb: "enabled"
          viewer: "disabled"
          gv_n_buffers: 1

    steps:
    # --- Setup Environment ---
    - name: Disable Perl And MinGW
      run: |
          choco uninstall mingw strawberryperl
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
          python-version: ${{ env.PYTHON_VERSION }}
    - run: python -m pip install PyYAML
    - run: python -m pip install conan

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

     # --- Dependency Management ---
    - run: mkdir ${{ env.DEPENDENCIES_DIR}}
    - name: Download pygobject ZIP file
      run: |
        Invoke-WebRequest -Uri ${{ env.PYGOBJECT_PKG_URL }} -OutFile pygobject.zip

    - name: Unzip the pygobject file
      run: |
        Expand-Archive -Path pygobject.zip -DestinationPath ./${{ env.DEPENDENCIES_DIR }}
        ls ./${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}
        


  #   - name: Cache Aravis repo
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.ARAVIS_REPO_PATH }}
  #       key: aravis-${{ matrix.aravis_version }}
  #       restore-keys: |
  #         aravis-
    - name: Clone and checkout specific tag of Aravis
      run: |
        git clone --depth 1 `
                  -b "${{ matrix.aravis_version }}" `
                  ${{ env.ARAVIS_GIT_REPO }} `
                  ${{ env.ARAVIS_REPO_PATH }}

     
    - name: Get dependencies using Conan
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        echo "::group::conan"
        conan profile detect
        conan install .. -b missing -pr ..\conan_profile -of .
        echo "::endgroup::"

     # --- Build with MSVC ---
    - name: Setup MSVC Developer Command Prompt
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Build Aravis using meson
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        echo "::group::virtualenv"
        ls build
        .\build\generators\conanbuild.ps1
        .\build\generators\conanrun.ps1
        $env:PATH="${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\bin;$env:PATH"
        $env:PKG_CONFIG_PATH="${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\lib\pkgconfig;$env:PKG_CONFIG_PATH"
        $env:PATH
        $env:PKG_CONFIG_PATH
        echo "::endgroup::"


        echo "::group::configure"
        meson setup `
          --prefix "${{ github.workspace }}\${{ env.ARAVIS_INSTALL_PATH}}" `
          --buildtype ${{ matrix.build_type_meson }} `
          --pkg-config-path "${{ github.workspace }}\${{ env.ARAVIS_REPO_PATH}}\build\generators;${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\lib\pkgconfig" `
          -Ddocumentation=disabled `
          -Dgst-plugin=${{ matrix.gst_plugin }} `
          -Dintrospection=${{ matrix.introspection }} `
          -Dusb=${{ matrix.usb }} `
          -Dviewer=${{ matrix.viewer }} `
          -Dgv-n-buffers=${{ matrix.gv_n_buffers }} `
          . .\build
        echo "::endgroup::"


  #       echo "::group::compile"
  #       meson compile -C .\build -v
  #       echo "::endgroup::"


  #       echo "::group::install"
  #       meson install -C .\build
  #       echo "::endgroup::"

  #     continue-on-error: true

  #   - name: Upload meson-log on failure
  #     if: failure()  # This step will only run if any of the previous steps failed.
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: meson-log
  #       path: ${{ env.ARAVIS_REPO_PATH }}/build/meson-logs/meson-log.txt

  #   - name: Create ZIP from installed files
  #     working-directory: ${{ env.ARAVIS_REPO_PATH }}
  #     run: |
  #       Compress-Archive -Path install\* -DestinationPath Aravis_${{ matrix.aravis_version }}.zip

  #   - name: Upload Aravis ZIP as artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name:  Aravis_${{ matrix.aravis_version }}_zip
  #       path:  ${{ env.ARAVIS_REPO_PATH }}/Aravis_${{ matrix.aravis_version }}.zip



  # build:
  #   needs: aravis
  #   runs-on: windows-latest

  #   steps:
  #     - name: Set up Python and Install Conan via pip
  #       uses: actions/setup-python@v2
  #       with:
  #          python-version: "${{ env.PYTHON_VERSION }}"
  #     - run: python -m pip install conan
  #     - run: python -m pip install PyYAML

  #     - name: Disable Perl (remove from PATH)
  #       run: choco uninstall mingw strawberryperl

  #     - name: Install WiX Toolset
  #       run: choco install wixtoolset -y

  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - name: Setup MSVC Developer Command Prompt
  #       uses: TheMrMilchmann/setup-msvc-dev@v3
  #       with:
  #         arch: x64

  #     - name: Create and enter build directory
  #       run: |
  #         cd installer
  #         mkdir build
  #         cd build

  #     - name: Run CMake
  #       working-directory: ${{ env.BUILD_PATH}}
  #       run: cmake -G "Visual Studio 17 2022" -A x64 ../

  #     - name: Build with CMake
  #       working-directory: ${{ env.BUILD_PATH}}
  #       run: cmake --build . --config Release

  #     - name: Package with CPack WIX
  #       working-directory: ${{ env.BUILD_PATH}}
  #       run: cpack -G "WIX"

  #     - name: Upload artifacts MSI
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: sensing-dev-installer-msi
  #         path: |
  #           ${{ env.BUILD_PATH}}/*.msi

  #     - name: Create package zip
  #       working-directory: ${{ env.BUILD_PATH}}
  #       run: cpack -G "ZIP"

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: sensing-dev-installer-zip
  #         path: |
  #           ${{ env.BUILD_PATH}}/*.zip

  # test:
  #   needs: build
  #   runs-on: windows-latest
  #   steps:
  #   - name: Run tests
  #     working-directory: installer
  #     run: |
  #       .\tools\Env.ps1
  #       python .\tests\sensing_dev_test.py
