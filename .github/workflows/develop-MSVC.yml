name: Sensing dev installer Build, Test

on:
  push:
    branches:
      #     - '*'  # This will run the build and test jobs for pull requests to all branches
      - 'feature/8-build-aravis-in-workflow'  # This will run the build and test jobs for every push on all branches

  # pull_request:
  #   branches:
  #     - '*'  # This will run the build and test jobs for pull requests to all branches



env:
  PYTHON_VERSION: '3.11.4'
  PYGOBJECT_REPO_PATH: installer\pygobject
  PYGOBJECT_GIT_REPO: https://github.com/Sensing-Dev/pygobject.git
  PYGOBJECT_PKG_URL: https://ion-kit.s3.us-west-2.amazonaws.com/dependencies/pygobject-3.42.2.zip
  PYGOBJECT_PKG_SHA: 'eea9465b7cbf1420ee3b3d8a78f6cfa3feeff89ffade7ab1874ebb25d7078037'
  PYGOBJECT_INSTALL_PATH: installer\dependencies\pygobject
  ARAVIS_REPO_PATH: installer\aravis
  ARAVIS_GIT_REPO: https://github.com/AravisProject/aravis.git
  ARAVIS_INSTALL_PATH: installer\dependencies\aravis
  ARAVIS_DEP_PATH: installer\dependencies\aravis_dependencies
  DEPENDENCIES_DIR: installer\dependencies
  BUILD_PATH: installer\build
  CONAN_USER_HOME: "${{ github.workspace }}/release/"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"


jobs:

  aravis:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type_meson: [release]
        aravis_version: ["0.8.25"]
        pygobject_version: ["3.42.2"]
        gst_plugin: ["disabled"]
        introspection: ["enabled"]
        usb: ["enabled"]
        viewer: ["disabled"]
        gv_n_buffers: [1]

    steps:
    # --- Setup Environment ---
    - name: Disable Perl And MinGW
      run: |
          choco uninstall strawberryperl
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
    - name: Setup Python
      uses: actions/setup-python@v4.7.1
      with:
         python-version: " ${{ env.PYTHON_VERSION }}"
         cache: "pip"
         cache-dependency-path: ${{ github.workspace }}/installer/requirements.txt
         update-environment: true
    

    - name: pip install      
      run:  python -m pip install PyYAML conan

    - name: Using the builtin GitHub Cache Action for .conan
      if: matrix.os == 'windows-latest'
      id: cache-conan
      uses: actions/cache@v3.3.2
      env:
        cache-name: cache-conan-modules
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('installer/conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Checkout repository
      uses: actions/checkout@v4.1.1
      with:
        submodules: recursive    

     # --- Dependency Management ---
    - run: mkdir ${{ env.DEPENDENCIES_DIR}}
    - name: Download pygobject ZIP file
      run: |
        Invoke-WebRequest -Uri ${{ env.PYGOBJECT_PKG_URL }} -OutFile pygobject.zip

    - name: Unzip the pygobject file
      run: |
        Expand-Archive -Path pygobject.zip -DestinationPath ./${{ env.DEPENDENCIES_DIR }}
        ls ./${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}       


  #   - name: Cache Aravis repo
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.ARAVIS_REPO_PATH }}
  #       key: aravis-${{ matrix.aravis_version }}
  #       restore-keys: |
  #         aravis-
    - name: Checkout Aravis repository
      uses: actions/checkout@v4.1.1
      with:
        repository:  ${{ env.ARAVIS_GIT_REPO }} 
        ref: "${{ matrix.aravis_version }}"
        path: ${{ env.ARAVIS_REPO_PATH }}
        submodules: recursive    
    
    - name: Restore Conan Cache
      if: steps.cache-conan.outputs.cache-hit == 'true' # Check if cache was restored
      run: echo "Conan cache was restored"

    - name: Get dependencies using Conan
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        echo "::group::conan"
        conan profile detect
        conan install .. -b missing -pr ..\conan_profile -of .
        echo "::endgroup::"

        echo "::group::move"
        Copy-Item -Path .\build\dependencies -Destination ${{ github.workspace }}\${{ env.ARAVIS_DEP_PATH }} -Recurse
        ls ${{ github.workspace }}\${{ env.ARAVIS_DEP_PATH }}
        echo "::endgroup::"

    - name: Save Conan Cache
      if: steps.cache-conan.outputs.cache-hit != 'true' # Check if cache was not restored
      run: echo "Conan cache was saved"

    # - name: Create Zip Archive
    #   working-directory: ${{ env.ARAVIS_REPO_PATH }}
    #   run: |
    #     # Create a zip archive of aravis-dependencies.       
    #     Compress-Archive -Path .\build -DestinationPath aravis_dependencies.zip

    # - name: Upload Artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: aravis_dependencies-artifact
    #     path:  ${{ env.ARAVIS_REPO_PATH }}/aravis_dependencies.zip

     # --- Build with MSVC ---
    - name: Setup MSVC Developer Command Prompt
      uses: TheMrMilchmann/setup-msvc-dev@v3.0.0
      with:
        arch: x64

    
    - name: Build Aravis using meson
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        echo "::group::virtualenv"
        ls build
        .\build\generators\conanbuild.ps1
        .\build\generators\conanrun.ps1
        $env:PATH="${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\bin;$env:PATH"
        $env:PKG_CONFIG_PATH="${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\lib\pkgconfig;$env:PKG_CONFIG_PATH"
        echo "::endgroup::"

        echo "::group::configure"
        meson setup `
          --prefix "${{ github.workspace }}\${{ env.ARAVIS_INSTALL_PATH}}" `
          --buildtype ${{ matrix.build_type_meson }} `
          --pkg-config-path "${{ github.workspace }}\${{ env.ARAVIS_REPO_PATH}}\build\generators;${{ github.workspace }}\${{ env.PYGOBJECT_INSTALL_PATH }}-${{ matrix.pygobject_version }}\lib\pkgconfig" `
          -Ddocumentation=disabled `
          -Dgst-plugin=${{ matrix.gst_plugin }} `
          -Dintrospection=${{ matrix.introspection }} `
          -Dusb=${{ matrix.usb }} `
          -Dviewer=${{ matrix.viewer }} `
          -Dgv-n-buffers=${{ matrix.gv_n_buffers }} `
          . .\build
        echo "::endgroup::"

        echo "::group::compile"
        meson compile -C .\build -v
        echo "::endgroup::"

        echo "::group::install"
        meson install -C .\build
        ls "${{ github.workspace }}\${{ env.ARAVIS_INSTALL_PATH}}"
        echo "::endgroup::"

    - name: Create and enter build directory
      run: |
          cd installer
          mkdir build
          cd build

    - name: Run CMake
      working-directory: ${{ env.BUILD_PATH}}
      run: cmake -G "Visual Studio 17 2022" `
              -D ARAVIS_ACTION="use_existing" `
              -D ARAVIS_DEP_ACTION="use_existing" `
              -D PYGOBJECT_ACTION="use_existing" `
              -A x64 ../

    - name: Build with CMake
      working-directory: ${{ env.BUILD_PATH}}
      run: cmake --build . --config Release

    - name: Package with CPack WIX
      working-directory: ${{ env.BUILD_PATH}}
      run: cpack -G "WIX"

    - name: Upload artifacts MSI
      uses: actions/upload-artifact@v3
      with:
        name: sensing-dev-installer-msi
        path: |
          ${{ env.BUILD_PATH}}/*.msi

    - name: Create package zip
      working-directory: ${{ env.BUILD_PATH}}
      run: cpack -G "ZIP"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sensing-dev-installer-zip
        path: |
          ${{ env.BUILD_PATH}}/*.zip

  #     continue-on-error: true

  #   - name: Upload meson-log on failure
  #     if: failure()  # This step will only run if any of the previous steps failed.
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: meson-log
  #       path: ${{ env.ARAVIS_REPO_PATH }}/build/meson-logs/meson-log.txt

  test:
    needs: aravis
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Run tests
      working-directory: installer
      run: |
        .\tools\Env.ps1
        python .\tests\sensing_dev_test.py
