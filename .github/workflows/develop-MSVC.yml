name: Sensing dev installer Build, Test

on:
  push:
    branches:
      - 'feature/8-build-aravis-in-workflow'  # This will run the build and test jobs for every push on all branches

  # pull_request:
  #   branches:
  #     - '*'  # This will run the build and test jobs for pull requests to all branches



env:
  PYTHON_VERSION: '3.11.4'
  PYGOBJECT_REPO_PATH: installer/pygobject
  PYGOBJECT_GIT_REPO: https://gitlab.gnome.org/GNOME/pygobject.git
  ARAVIS_REPO_PATH: installer/aravis
  ARAVIS_GIT_REPO: https://github.com/AravisProject/aravis.git
  BUILD_PATH: installer/build


jobs: 

  pygobject:    
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        build_type_meson: [release]
        pygobject_version: ["3.42.0"]
        pycairo: ["disabled"]

    steps:
    - name: Setup Common Environment
      uses: ./.github/composite-actions/setup-environment
    - name: Cache Pygobject repo
      uses: actions/cache@v2
      with:
        path: ${{ env.PYGOBJECT_REPO_PATH }}
        key: pygobject-${{ matrix.pygobject_version }}
        restore-keys: |
          pygobject-
          
    - name: Clone and checkout specific tag of Pygobject
      run: |
        git clone "${{ env.PYGOBJECT_GIT_REPO}}" ${{ env.PYGOBJECT_REPO_PATH }}
        cd ${{ env.PYGOBJECT_REPO_PATH }}
        git checkout "${{ matrix.pygobject_version }}"

    - name: Get dependencies using Conan
      working-directory: ${{ env.PYGOBJECT_REPO_PATH }}
      run: |
        echo "::group::conan"
        conan profile detect
        conan install .. -b missing -pr ..\conan_profile -of .
        echo "::endgroup::"

    - name: Build pygobject 
      working-directory: ${{ env.PYGOBJECT_REPO_PATH }}
      run: |
          echo "::group::virtualenv"
          .\build\generators\conanbuild.ps1
          .\build\generators\conanrun.ps1
          echo "::endgroup::"


          echo "::group::configure"
          meson setup `
          --prefix ${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\install `
          --buildtype ${{ matrix.build_type_meson }} `
          --pkg-config-path ${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\build\generators `
          -Dpycairo=${{ matrix.pycairo }} `
          -Dtests=false `
          . .\build
          $env:PKG_CONFIG_PATH=${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\build\dependencies;$env:PKG_CONFIG_PATH
          echo "::endgroup::"


          echo "::group::compile"
          meson compile -C .\build -v
          echo "::endgroup::"


          echo "::group::install"
          meson install -C .\build
          echo "::endgroup::"

  aravis:
    needs: pygobject
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
        - build_type_meson: release
          aravis_version: "0.8.25"
          gst_plugin: "disabled"
          introspection: "enabled"
          usb: "enabled"
          viewer: "disabled"
          gv_n_buffers: 1

    steps:
    - name: Setup Common Environment
      uses: ./.github/composite-actions/setup-environment
    - name: Cache Aravis repo
      uses: actions/cache@v2
      with:
        path: ${{ env.ARAVIS_REPO_PATH }}
        key: aravis-${{ matrix.aravis_version }}
        restore-keys: |
          aravis-
    - name: Clone and checkout specific tag of Aravis
      run: |
        git clone --depth 1 `
                  -b "${{ matrix.aravis_version }}" `
                  ${{ env.ARAVIS_REPO }} `
                  ${{ env.ARAVIS_PATH }}
    - name: Build Aravis using meson 
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        echo "::group::virtualenv"
        ..\pygobject\build\generators\conanbuild.ps1
        ..\pygobject\build\generators\conanrun.ps1
        echo "::endgroup::"


        echo "::group::configure"
        $env:PATH=${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\install\bin;$env:PATH
        $env:PKG_CONFIG_PATH=${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\install\lib\pkgconfig;$env:PKG_CONFIG_PATH

        meson setup `
          --prefix ${{ github.workspace }}\${{ env.ARAVIS_REPO_PATH}}\install `
          --buildtype ${{ matrix.build_type_meson }} `
          --pkg-config-path ${{ github.workspace }}\${{ env.ARAVIS_REPO_PATH}}\pygobject\generators;${{ github.workspace }}\${{ env.PYGOBJECT_REPO_PATH }}\install\lib\pkgconfig `
          -Ddocumentation=disabled `
          -Dgst-plugin=${{ matrix.gst_plugin }} `
          -Dintrospection=${{ matrix.introspection }} `
          -Dusb=${{ matrix.usb }} `
          -Dviewer=${{ matrix.viewer }} `
          -Dgv-n-buffers=${{ matrix.gv_n_buffers }} `
          . .\build
        echo "::endgroup::"


        echo "::group::compile"
        meson compile -C .\build -v
        echo "::endgroup::"


        echo "::group::install"
        meson install -C .\build
        echo "::endgroup::"
  
    - name: Create ZIP from installed files
      working-directory: ${{ env.ARAVIS_REPO_PATH }}
      run: |
        Compress-Archive -Path install\* -DestinationPath aravis_${{ matrix.aravis_version }}.zip

    - name: Upload Aravis ZIP as artifact
      uses: actions/upload-artifact@v2
      with:
        name:  aravis_${{ matrix.aravis_version }}_zip
        path:  ${{ env.ARAVIS_REPO_PATH }}/aravis_${{ matrix.aravis_version }}.zip



  build:
    needs: aravis
    runs-on: windows-latest
    
    steps: 
    - name: Setup Common Environment
      uses: ./.github/composite-actions/setup-environment

    - name: Create and enter build directory
      run: |
        cd installer
        mkdir build
        cd build

    - name: Run CMake
      working-directory: ${{ env.BUILD_PATH}}
      run: cmake -G "Visual Studio 17 2022" -A x64 ../

    - name: Build with CMake
      working-directory: ${{ env.BUILD_PATH}}
      run: cmake --build . --config Release

    - name: Package with CPack WIX
      working-directory: ${{ env.BUILD_PATH}}
      run: cpack -G "WIX"

    - name: Upload artifacts MSI
      uses: actions/upload-artifact@v2
      with:
        name: sensing-dev-installer-msi
        path: |
          ${{ env.BUILD_PATH}}/*.msi

    - name: Create package zip
      working-directory: ${{ env.BUILD_PATH}}
      run: cpack -G "ZIP"

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: sensing-dev-installer-zip
        path: |
          ${{ env.BUILD_PATH}}/*.zip
            
  test:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Run tests
      working-directory: installer
      run: |
        .\tools\Env.ps1
        python .\tests\sensing_dev_test.py
